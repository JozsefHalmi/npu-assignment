//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IReviewsClient {
    get(creationId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfReviewDto>;
    post(command: CreateReviewCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class ReviewsClient implements IReviewsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(creationId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfReviewDto> {
        let url_ = this.baseUrl + "/api/Reviews?";
        if (creationId === null)
            throw new Error("The parameter 'creationId' cannot be null.");
        else if (creationId !== undefined)
            url_ += "CreationId=" + encodeURIComponent("" + creationId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfReviewDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfReviewDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<PaginatedListOfReviewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfReviewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    post(command: CreateReviewCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Reviews";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICreationsClient {
    get(brickCode: string | undefined): Observable<CreationDto[]>;
    post(command: CreateCreationCommand): Observable<void>;
}

@Injectable({
    providedIn: 'root'
})
export class CreationsClient implements ICreationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(brickCode: string | undefined): Observable<CreationDto[]> {
        let url_ = this.baseUrl + "/api/Creations?";
        if (brickCode === null)
            throw new Error("The parameter 'brickCode' cannot be null.");
        else if (brickCode !== undefined)
            url_ += "BrickCode=" + encodeURIComponent("" + brickCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CreationDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CreationDto[]>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CreationDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CreationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    post(command: CreateCreationCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Creations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class PaginatedListOfReviewDto implements IPaginatedListOfReviewDto {
    items?: ReviewDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfReviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ReviewDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfReviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfReviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfReviewDto {
    items?: ReviewDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class ReviewDto implements IReviewDto {
    customer?: CustomerDto;
    creationId?: number;
    creativityScore?: number;
    uniquenessScore?: number;
    text?: string;

    constructor(data?: IReviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customer = _data["customer"] ? CustomerDto.fromJS(_data["customer"]) : <any>undefined;
            this.creationId = _data["creationId"];
            this.creativityScore = _data["creativityScore"];
            this.uniquenessScore = _data["uniquenessScore"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): ReviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        data["creationId"] = this.creationId;
        data["creativityScore"] = this.creativityScore;
        data["uniquenessScore"] = this.uniquenessScore;
        data["text"] = this.text;
        return data;
    }
}

export interface IReviewDto {
    customer?: CustomerDto;
    creationId?: number;
    creativityScore?: number;
    uniquenessScore?: number;
    text?: string;
}

export class CustomerDto implements ICustomerDto {
    id?: number;
    firstName?: string;
    lastName?: string;

    constructor(data?: ICustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): CustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface ICustomerDto {
    id?: number;
    firstName?: string;
    lastName?: string;
}

export class CreateReviewCommand implements ICreateReviewCommand {
    customerId?: number;
    creationId?: number;
    uniquenessScore?: number;
    creativityScore?: number;
    text!: string;

    constructor(data?: ICreateReviewCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerId = _data["customerId"];
            this.creationId = _data["creationId"];
            this.uniquenessScore = _data["uniquenessScore"];
            this.creativityScore = _data["creativityScore"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CreateReviewCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReviewCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["creationId"] = this.creationId;
        data["uniquenessScore"] = this.uniquenessScore;
        data["creativityScore"] = this.creativityScore;
        data["text"] = this.text;
        return data;
    }
}

export interface ICreateReviewCommand {
    customerId?: number;
    creationId?: number;
    uniquenessScore?: number;
    creativityScore?: number;
    text: string;
}

export class CreationDto implements ICreationDto {
    created?: Date;
    createdBy?: string | undefined;
    uniquenessScore?: number | undefined;
    creativityScore?: number | undefined;
    thumbnailPath?: string | undefined;
    imagePath?: string | undefined;
    description?: string | undefined;

    constructor(data?: ICreationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.uniquenessScore = _data["uniquenessScore"];
            this.creativityScore = _data["creativityScore"];
            this.thumbnailPath = _data["thumbnailPath"];
            this.imagePath = _data["imagePath"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreationDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["uniquenessScore"] = this.uniquenessScore;
        data["creativityScore"] = this.creativityScore;
        data["thumbnailPath"] = this.thumbnailPath;
        data["imagePath"] = this.imagePath;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreationDto {
    created?: Date;
    createdBy?: string | undefined;
    uniquenessScore?: number | undefined;
    creativityScore?: number | undefined;
    thumbnailPath?: string | undefined;
    imagePath?: string | undefined;
    description?: string | undefined;
}

export class CreateCreationCommand implements ICreateCreationCommand {
    title!: string;
    description!: string;
    thumbnailPath!: string;
    imagePath!: string;
    customerId?: number;
    brickCodes!: string[];

    constructor(data?: ICreateCreationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.brickCodes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.thumbnailPath = _data["thumbnailPath"];
            this.imagePath = _data["imagePath"];
            this.customerId = _data["customerId"];
            if (Array.isArray(_data["brickCodes"])) {
                this.brickCodes = [] as any;
                for (let item of _data["brickCodes"])
                    this.brickCodes!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateCreationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCreationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["thumbnailPath"] = this.thumbnailPath;
        data["imagePath"] = this.imagePath;
        data["customerId"] = this.customerId;
        if (Array.isArray(this.brickCodes)) {
            data["brickCodes"] = [];
            for (let item of this.brickCodes)
                data["brickCodes"].push(item);
        }
        return data;
    }
}

export interface ICreateCreationCommand {
    title: string;
    description: string;
    thumbnailPath: string;
    imagePath: string;
    customerId?: number;
    brickCodes: string[];
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}